{
  "name": "Automotion",
  "tagline": "Simple library for complex problems",
  "body": "# Automotion #\r\nThis is JAVA library for the running of mobile, web or API automated tests.\r\n\r\n### Steps to connect ###\r\n - Repo:\r\n   * add dependecy:\r\n\r\n                <dependency>\r\n                    <groupId>net.itarray</groupId>\r\n                    <artifactId>automotion</artifactId>\r\n                    <version>1.4.0</version>\r\n                </dependency>\r\n\r\n### Steps of adding to the project ###\r\n\r\n- Create instance of WebDriverFactory and call getDriver:\r\n\r\n            WebDriverFactory driverFactory = new WebDriverFactory();\r\n            WebDriver driver = driverFactory.getDriver();\r\n            \r\n- Extend Your page classes from BaseWebMobileElement class to have access to methods:\r\n\r\n            getWebElement(final By by)\r\n            getWebElement(ExpectedCondition<WebElement> expectedCondition)\r\n            \r\n            getMobileElement(final By by, int timeOfWaiting)\r\n            getMobileElement(final By by)\r\n            \r\n            getWebElements(final By by)\r\n            getWebElements(ExpectedCondition<List<WebElement>> expectedCondition)  \r\n\r\n### Steps of using during test run ###\r\n\r\n#### ! Do not forget to put Chrome and Gecko drivers into Your project src/test/resources/drivers ! ####\r\n\r\n - Specify env variables or system properties (example):\r\n    * For Web local run:       \r\n         \r\n            IS_LOCAL=True\r\n            BROWSER=Firefox|Chrome|IE|Safari\r\n\r\n    * For Web remote run:\r\n\r\n            IS_REMOTE=True\r\n            BROWSER=Firefox|Chrome|IE|Safari\r\n            EXECUTOR=http://{host}:{port}/wd/hub\r\n            (optional available with Chrome only) MOBILE_DEVICE_EMULATION=Google Nexus 5|Apple iPhone 6|Samsung Galaxy S5\r\n\r\n    * For Web Mobile run:\r\n\r\n            IS_MOBILE=True\r\n            PLATFORM=Android|iOS\r\n            BROWSER=Chrome|Safari\r\n            EXECUTOR=http://{host}:{port}/wd/hub\r\n            DEVICE=Device name\r\n            \r\n    * For Web Headless run (with PhantomJS without browser):\r\n\r\n            IS_HEADLESS=True\r\n            BROWSER=Firefox|Chrome|IE|Safari\r\n            PHANTOM_JS_PATH=C://phantomjs.exe\r\n\r\n    * For Native Mobile run:\r\n\r\n            IS_MOBILE=True\r\n            PLATFORM=Android|iOS\r\n            APP={path_to_app}\r\n            EXECUTOR=http://{host}:{port}/wd/hub\r\n            DEVICE=Device name\r\n\r\n    * For Windows UWP:\r\n\r\n            IS_MOBILE=True\r\n            PLATFORM=Windows\r\n            APP={path_to_app}\r\n            EXECUTOR=http://{host}:{port}/wd/hub\r\n            DEVICE=Device name or ID\r\n\r\n### Possibilities ###\r\n - Responsive UI Validator allows to validate UI on web or mobile page using lots of criterias. Also it allows tu build thr HTMl report after validation.\r\n            \r\n            ResponsiveUIValidator uiValidator = new    ResponsiveUIValidator(driver);\r\n            \r\n            \r\n            boolean result = uiValidator.init()\r\n                   .findElement({rootEelement}, \"Name of element\")\r\n                   .sameOffsetLeftAs({element} \"Panel 1\")\r\n                   .sameOffsetLeftAs({element} \"Button 1\")\r\n                   .sameOffsetRightAs({element} \"Button 2\")\r\n                   .sameOffsetRightAs({element}, \"Button 3)\r\n                   .withCssValue(\"border\", \"2px\", \"solid\", \"#FBDCDC\")\r\n                   .withCssValue(\"border-radius\", \"4px\")\r\n                   .withoutCssValue(\"color\", \"#FFFFFF\")\r\n                   .sameSizeAs({list_elements},)\r\n                   .insideOf({element}, \"Container\")\r\n                   .notOverlapWith({element}, \"Other element\")\r\n                   .withTopElement({element}, 10, 15)\r\n                   .changeMetricsUnitsTo(ResponsiveUIValidator.Units.PERCENT)\r\n                   .widthBetween(50, 55)\r\n                   .heightBetween(90, 95)\r\n                   .drawMap()\r\n                   .validate();\r\n            \r\n            \r\n            uiValidator.generateReport();\r\n\r\n - Verification that elements are aligned correctly on the web or mobile page\r\n    * Elements horizontally are aligned correctly:\r\n        \r\n            PageValidator.elementsAreAlignedHorizontally(List<WebElement> elements) - boolean\r\n    \r\n    * Elements vertically are aligned correctly:\r\n    \r\n            PageValidator.elementsAreAlignedVertically(List<WebElement> elements) - boolean\r\n        \r\n    * Elements are aligned properly in general:\r\n    \r\n            PageValidator.elementsAreAlignedProperly(List<WebElement> elements) - boolean\r\n            \r\n - Helpers that are useful in the very different situations:\r\n    * Generate UUID with specified length:\r\n            \r\n            Helper.getGeneratedStringWithLength(int length) - String\r\n            \r\n    * Create image file on fly:\r\n    \r\n            Helper.createFile(String filename) - File. Will be saved in the folder \"target/\" that is been created after building\r\n            \r\n    * Parse JSON text:\r\n    \r\n            Parser.getJSONValue(String textToParse, String key) - String\r\n            \r\n    * Parse XML text based on SAX algorithm:\r\n        \r\n            Parser.getXMLValue(String xmlToParse, String xpath) - String\r\n            Parser.getXMLValues(String xmlToParse, String xpath) - List<String>\r\n            \r\n    * Smart Text finder. Can find the string even in the broken text with corrupted characters:\r\n     \r\n            TextFinder.textIsFound(String whatToFind, String whereToFind) - bool. Default derivation is 30% (0.3). It means that accuracy of searching will be 70%\r\n            TextFinder.setDerivation(int newValue) - void. New value between 0 and 1.\r\n            \r\n    * Mail checker (IMAP). Possible to connect to any IMAP mail box (Gmail for example) and get the list of mails with access to the mail details.\r\n     \r\n            MailService mailService = new MailService();\r\n            mailService\r\n                       .setFolder(MailService.MailFolder.INBOX) // (INBOX, SPAM, TRASH)\r\n                       .login(String IMAP_Server, int IMAP_Port, String email, String passwordToEmail);\r\n            \r\n\r\n            mailService.isLoggedIn()) - boolean\r\n            mailService.getMessageCount() - integer\r\n            mailService.getMessages() - Message[]\r\n            mailService.getLastMessage() - Message - last message\r\n            \r\n    * Language validator. Algorithm based on semantic approach of languages validation on the web page. Allowed methods:\r\n     \r\n            LanguageChecker.getRecognisedLanguage(String textToValidate) - Optional<LdLocale> \r\n            Allowed method .get() to get access to the details. E.g LanguageChecker.getRecognisedLanguage(String textToValidate).get().getLanguage() will return \"en\"\r\n            \r\n            LanguageChecker.isCorrectLanguageOnThePage(WebDriver driver, String lang) - boolean. String lang is 2-chars abbreviature. E.g \"en\" or \"es\"\r\n            \r\n  - Web and mobile WebDriver Helpers that are useful in the very different situations:\r\n  \r\n    * All the methods are collected in both classes: MobileHelper and DriverHelper. The most useful pf them are:\r\n     \r\n            DriverHelper.scrollDownWeb(WebDriver driver) \r\n            DriverHelper.scrollUpWeb(WebDriver driver) \r\n            DriverHelper.scrollDownMobile(AppiumDriver driver)\r\n            DriverHelper.scrollUpMobile(AppiumDriver driver)\r\n            DriverHelper.scrollDownMobile(AppiumDriver driver, int duration) - duration not less than 500ms\r\n            DriverHelper.scrollUpMobile(AppiumDriver driver, int duration) - duration not less than 500ms\r\n            DriverHelper.scrollDownMobileElement(AppiumDriver driver, MobileElement element)\r\n            DriverHelper.scrollUpMobileElement(AppiumDriver driver, MobileElement element)\r\n            DriverHelper.scrollDownMobileElement(AppiumDriver driver, MobileElement element, int duration) - duration not less than 500ms\r\n            DriverHelper.scrollUpMobileElement(AppiumDriver driver, MobileElement element, int duration) - duration not less than 500ms\r\n            \r\n            DriverHelper.hideKeyboard(AppiumDriver driver) - super method that perform hiding of keyboard for Android and iOS\r\n            \r\n            DriverHelper.click(WebDriver driver, WebElement element) - Smart click that will try to click few times\r\n            \r\n            DriverHelper.clickByLocation(WebDriver driver, WebElement element, ClickPoint clickPoint)\r\n            DriverHelper.clickByLocation(AppiumDriver driver, MobileElement element, ClickPoint clickPoint) - methods for clickin on the elements with specified point of click.\r\n            Allowed ClickPoint are: ClickPoint.TOP_LEFT, ClickPoint.TOP_RIGHT, ClickPoint.BOTTOM_LEFT, ClickPoint.BOTTOM_RIGHT, ClickPoint.CENTER\r\n             \r\n            DriverHelper.clickJQuery(WebDriver driver, WebElement element) - click method that is performed by triggering JQuery native method\r\n            \r\n            DriverHelper.waitForPageIsReady(WebDriver driver) - wait for page is loaded and all the backgrounded process are finished\r\n            \r\n            MobileHelper.turnOnWifi() - turn on WiFI on Android Mobile device\r\n            MobileHelper.turnOffWifi() - turn off WiFI on Android Mobile device\r\n            MobileHelper.turnOnMobileData() - turn on Mobile data on Android Mobile device\r\n            MobileHelper.turnOffMobileData() - turn off Mobile data on Android Mobile device\r\n            MobileHelper.turnOnAirplaneMode() - turn on Airplane mode on Android Mobile device\r\n            MobileHelper.turnOffAirplaneMode() - turn off Airplane mode on Android Mobile device\r\n            \r\n            MobileHelper.openAndroidNotifications(AppiumDriver driver) - open notification tray on Android devices\r\n            \r\n            \r\n - API calls. This part is very important because allows to perform different kind of HTTP(s) request with parameters.\r\n \r\n    * Example of sending POST request:\r\n            \r\n            new ConnectionFactory(String baseUrl).sendPost(Map map, String endpoint, String token, boolean withMediaFile) - return Map<Integer, String> where Integer is response code and String is response body\r\n            Parameter map contains usual HTTP Pair-Values set of data in the representation of Java Map interface. \r\n            String endpoint - is the ending of URL e.g \"/api/v1/users\".\r\n            Parameter boolean withMediaFile is for advanced usage if You want to generate and upload some file\r\n            Parameter token - is authorisation token if we want to perform request with auth. If not, just leave this parameter as empty string\r\n            \r\n    * Example of sending GET request:\r\n    \r\n            new ConnectionFactory(String baseUrl).sendGet(String endpoint, String token) - return Map<Integer, String> where Integer is response code and String is response body\r\n            String endpoint - is the ending of URL e.g \"/api/v1/users?id=1\"\r\n            Parameter token - is authorisation token if we want to perform request with auth. If not, just leave this parameter as empty string\r\n            \r\n    * Example of sending PUT request:\r\n            \r\n            new ConnectionFactory(String baseUrl).sendPut(Map map, String endpoint, String token) - return Map<Integer, String> where Integer is response code and String is response body\r\n            Parameter map contains usual HTTP Pair-Values set of data in the representation of Java Map interface. \r\n            String endpoint - is the ending of URL e.g \"/api/v1/users\".\r\n            Parameter token - is authorisation token if we want to perform request with auth. If not, just leave this parameter as empty string\r\n            \r\n    * Example of sending DELETE request:\r\n    \r\n            new ConnectionFactory(String baseUrl).sendDelete(String endpoint, String token) - return Map<Integer, String> where Integer is response code and String is response body\r\n            String endpoint - is the ending of URL e.g \"/api/v1/users?id=1\"\r\n            Parameter token - is authorisation token if we want to perform request with auth. If not, just leave this parameter as empty string\r\n\r\n            \r\n            \r\n            \r\n    \r\n    \r\n### Contact ###\r\nDenys Zaiats\r\ndenys.zaiats@gmail.com",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}